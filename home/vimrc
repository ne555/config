set nowritebackup
set nobackup
set noswapfile
set viminfo=
"set verbose=9
"tab
set autoindent
set tabstop=4
"set expandtab
set shiftwidth=4

set showcmd

set nu "line numbers
syntax on "highlighting
if &diff
	syntax off
endif
"set hlsearch "resalt found text
"set mouse=a
set t_Co=256

colorscheme desert
set printoptions=paper:a4

"keycodes
"press <C-v>Fn
set <F1>=OP
set <F2>=OQ
set <F3>=OR
set <F4>=OS
set <F5>=[15~
set <F6>=[17~
set <F7>=[18~
set <F8>=[19~
set <F9>=[20~
set <F10>=[21~
set <F11>=[23~
set <F12>=[24~

"macros
nnoremap Q @@
set lazyredraw

"compilar
set makeprg=clear\ &&\ g++\ -fno-diagnostics-show-caret\ -W{all,extra,pedantic}\ -fsanitize=undefined\ -ggdb\ -std=c++17\ %
map <F9> :write <Return> :make <Return>
"moverse por los errores
map [q :cnext <Return>
map ]q :cprev <Return>

"usar templates segun extension del archivo
autocmd! BufNewFile * silent! 0r ~/.vim/skeletons/template.%:e
autocmd! BufNewFile,BufRead *.tex set filetype=tex

"autocomplete commands
set wildmode=longest,list

"open doc files
autocmd BufReadPre *.doc set ro
autocmd BufReadPost *.doc %!antiword -f -i 1 -w 0 "%"

"for autocompletion of code (clang)
let g:clang_complete_auto = 0
"parameters of functions
let g:clang_snippets = 1
let g:clang_snippets_engine = 'clang_complete'
let g:clang_sort_algo='alpha'

"identado (clang-format)
augroup file_cpp
	autocmd!
	autocmd FileType cpp setlocal formatprg=clang-format\ -style=file\ 2>/dev/null
augroup END
"map <C-K> :pyf /usr/share/clang/clang-format.py<cr>
"imap <C-K> <c-o>:pyf /usr/share/clang/clang-format.py<cr>


" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
"set completeopt=menuone,menu,longest,preview
set completeopt=menuone,menu,longest

"to set omnicpp
au BufNewFile,BufRead,BufEnter *.cpp,*.hpp set omnifunc=omni#cpp#complete#Main

"let $PAGER=''
"nmap K :Man <C-R>=expand(\\"<cword>\\")<CR><CR> -\""

runtime ftplugin/man.vim

function! s:insert_gates()
	let gatename = substitute(toupper(expand("%:t")), "\\.", "_", "g")
	execute "normal! i#ifndef " . gatename
	execute "normal! o#define " . gatename . " "
	execute "normal! Go#endif /* " . gatename . " */"
	normal! kk
	endfunction
autocmd BufNewFile *.{h,hpp} call <SID>insert_gates()


set path+=../header
set path+=~/usr/local/include
"open the #include file in a new vertical window
map f :vertical botright sfind <cfile><CR>

"ctags
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
"map <C-\> :vertical botright split<CR>:exec("tag ".expand("<cword>"))<CR>

"cscope
if has("cscope")
	set cscopeprg=/usr/bin/cscope
	set cscopetagorder=0
	set cscopetag
	set nocscopeverbose
	" add any database in current directory
	if filereadable("cscope.out")
		cs add cscope.out
	" else add database pointed to by environment
	elseif $CSCOPE_DB != ""
		cs add $CSCOPE_DB
	endif
	set cscopeverbose
endif

nmap <C-c>s 
	\:cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-c>g 
	\:cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-c>c 
	\:cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-c>t 
	\:cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-c>e 
	\:cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-c>f 
	\:cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-c>i 
	\:cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-c>d 
	\:cs find d <C-R>=expand("<cword>")<CR><CR>

"latex plugin
filetype plugin on
set grepprg=grep\ -nH\ $*
filetype indent on
let g:tex_flavor='latex'

let g:Tex_SmartKeyBS = 0
let g:Tex_SmartKeyQuote = 0
let g:Tex_SmartKeyDot = 0

let g:Imap_UsePlaceHolders = 0

let g:Tex_Leader = '`tex'
let g:Tex_Leader2 = ',tex'


"syntastic
let g:syntastic_mode_map = { "mode": "pasive", "active_filetypes": ["foo"], "passive_filetypes": ["cpp", "python"] }

let g:pydiction_location = '/usr/share/pydiction/complete-dict'
set omnifunc=syntaxcomplete#Complete

let g:syntastic_quiet_messages = {'regex': 'missing `\\@', 'level': 'warning'}

"no analiza
let g:syntastic_check_on_wq = 0


"syntastic
nmap ]l :lnext<CR>
nmap [l :lprev<CR>
"nmap R :call Rae(expand("<cword>"))<CR><CR>

function! Rae(palabra)
	new
	:exec printf('0read !rae %s | nocolor.sh', a:palabra)
	0
endfunction


" Ignore Uppercase words when spell checking
fun! IgnoreUppercaseSpell()
  syn match Uppercase /\<[A-Z][a-z]*\>/ contains=@NoSpell transparent
  syn cluster Spell add=Uppercase
endfun
"autocmd BufRead,BufNewFile * :call IgnoreUppercaseSpell()

"Gdiff open in vertical
set diffopt=filler,vertical


"save cursor position
augroup resCur
  autocmd!
  autocmd BufReadPost * call setpos(".", getpos("'\""))
augroup END


"subtitles
"{{{
augroup subtitles
	autocmd!
	autocmd BufRead *.srt :setlocal nobomb fileencoding=utf8 fileformat=unix
augroup END
"}}}
